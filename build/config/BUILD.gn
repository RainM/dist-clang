config("base") {
  cflags = [
    "-fPIC",
    "-pipe",
    "-pthread",
    "-Wall",
    "-Wsign-compare",
    "-Werror",    
  ]
  cflags_cc = [
    "-std=c++1y",
  ]
  include_dirs = [ "//src" ]
}

config("default_library") {
  cflags = [
    "-fPIC",   
  ]
  cflags_cc = [
    "-std=c++1y",
    "-nostdinc++",
  ]
  include_dirs = [ "//src/third_party/libcxx/exported/include" ]
  ldflags = [ "-nodefaultlibs" ]
  libs = [ "c" ]
}

config("debug") {
  cflags = [
    "-g",
    "-O0",
  ]
  ldflags = [
    "-rpath", rebase_path("$root_out_dir/lib"),
  ]
}

config("release") {
  cflags = [
    "-fomit-frame-pointer",
    "-O3",
  ]
  defines = [
    "NDEBUG",
  ]
  ldflags = [
    "-rpath", "/usr/lib/dist-clang",
    "-rpath", rebase_path("$root_out_dir/lib"), # TODO: remove it when building for distribution.
  ]
}

config("no_stdlibs") {
  cflags_cc = [
    "-nostdinc++",
  ]
  ldflags = [
    "-nodefaultlibs",
  ]
  libs = [
    "c",
    "m",
    "pthread",
  ]
}

config("no_exceptions") {
  cflags_cc = [ "-fno-exceptions" ]
  ldflags = [ "-fno-exceptions" ]
}

config("no_rtti") {
  cflags_cc = [ "-fno-rtti" ]
  ldflags = [ "-fno-rtti" ]
}

config("profiler") {
  defines = [ "PROFILER" ]
  libs = [ "profiler" ]
}

config("tcmalloc") {
  libs = [ "tcmalloc" ]
}

config("libclang_includes") {
  defines = exec_script("//build/llvm.py", [ "defines" ], "list lines")
  include_dirs = exec_script("//build/llvm.py", [ "includedir" ], "list lines")
}

config("libclang") {
  defines = exec_script("//build/llvm.py", [ "defines" ], "list lines")
  include_dirs = exec_script("//build/llvm.py", [ "includedir" ], "list lines")
  ldflags = exec_script("//build/llvm.py", [ "ldflags" ], "list lines")

  libs = [
    "c",
    "stdc++",

    # libclang parts:
    "clangTooling",
    "clangFrontendTool",
    "clangFrontend",
    "clangDriver",
    "clangSerialization",
    "clangCodeGen",
    "clangParse",
    "clangSema",
    "clangStaticAnalyzerFrontend",
    "clangStaticAnalyzerCheckers",
    "clangStaticAnalyzerCore",
    "clangAnalysis",
    "clangARCMigrate",
    "clangRewriteFrontend",
    "clangRewriteCore",
    "clangEdit",
    "clangAST",
    "clangLex",
    "clangBasic"
  ]
  libs += exec_script("//build/llvm.py", [ "libs" ], "list lines")
  libs += exec_script("//build/llvm.py", [ "system-libs" ], "list lines")
}

config("version") {
  defines = [ "VERSION=\"$version\"" ]
}

config("asan") {
  cflags = [
    "-fsanitize=address",
    "-fno-omit-frame-pointer",
  ]

  ldflags = [ "-fsanitize=address" ]
}
