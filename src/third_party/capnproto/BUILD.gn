include_dirs = [ "exported/c++/src" ]

config("disable_warnings") {
  cflags = [
    "-Wno-sign-compare",
    "-Wno-unused-function",
    "-Wno-unused-variable",
  ]
}

source_set("kj") {
  sources = [
    "exported/c++/src/kj/arena.c++",
    "exported/c++/src/kj/arena.h",
    "exported/c++/src/kj/array.c++",
    "exported/c++/src/kj/array.h",
    "exported/c++/src/kj/async.c++",
    "exported/c++/src/kj/async.h",
    "exported/c++/src/kj/async-inl.h",
    "exported/c++/src/kj/async-io.c++",
    "exported/c++/src/kj/async-io.h",
    "exported/c++/src/kj/async-prelude.h",
    "exported/c++/src/kj/async-unix.c++",
    "exported/c++/src/kj/async-unix.h",
    "exported/c++/src/kj/common.c++",
    "exported/c++/src/kj/common.h",
    "exported/c++/src/kj/debug.c++",
    "exported/c++/src/kj/debug.h",
    "exported/c++/src/kj/exception.c++",
    "exported/c++/src/kj/exception.h",
    "exported/c++/src/kj/function.h",
    "exported/c++/src/kj/io.c++",
    "exported/c++/src/kj/io.h",
    "exported/c++/src/kj/main.c++",
    "exported/c++/src/kj/main.h",
    "exported/c++/src/kj/memory.c++",
    "exported/c++/src/kj/memory.h",
    "exported/c++/src/kj/miniposix.h",
    "exported/c++/src/kj/mutex.c++",
    "exported/c++/src/kj/mutex.h",
    "exported/c++/src/kj/one-of.h",
    "exported/c++/src/kj/parse/char.c++",
    "exported/c++/src/kj/parse/char.h",
    "exported/c++/src/kj/parse/common.h",
    "exported/c++/src/kj/refcount.c++",
    "exported/c++/src/kj/refcount.h",
    "exported/c++/src/kj/std/iostream.h",
    "exported/c++/src/kj/string.c++",
    "exported/c++/src/kj/string.h",
    "exported/c++/src/kj/string-tree.c++",
    "exported/c++/src/kj/string-tree.h",
    "exported/c++/src/kj/thread.c++",
    "exported/c++/src/kj/thread.h",
    "exported/c++/src/kj/threadlocal.h",
    "exported/c++/src/kj/time.c++",
    "exported/c++/src/kj/time.h",
    "exported/c++/src/kj/tuple.h",
    "exported/c++/src/kj/units.c++",
    "exported/c++/src/kj/units.h",
    "exported/c++/src/kj/vector.h",
    "exported/c++/src/kj/windows-sanity.h",
  ]
  
  configs += [ ":disable_warnings" ]
}

shared_library("capnp") {
  sources = [
    "exported/c++/src/capnp/any.c++",
    "exported/c++/src/capnp/any.h",
    "exported/c++/src/capnp/arena.c++",
    "exported/c++/src/capnp/arena.h",
    "exported/c++/src/capnp/blob.c++",
    "exported/c++/src/capnp/blob.h",
    "exported/c++/src/capnp/capability.c++",
    "exported/c++/src/capnp/capability.h",
    "exported/c++/src/capnp/c++.capnp.c++",
    "exported/c++/src/capnp/c++.capnp.h",
    "exported/c++/src/capnp/common.h",
    "exported/c++/src/capnp/dynamic.c++",
    "exported/c++/src/capnp/dynamic-capability.c++",
    "exported/c++/src/capnp/dynamic.h",
    "exported/c++/src/capnp/endian.h",
    "exported/c++/src/capnp/ez-rpc.c++",
    "exported/c++/src/capnp/ez-rpc.h",
    "exported/c++/src/capnp/generated-header-support.h",
    "exported/c++/src/capnp/layout.c++",
    "exported/c++/src/capnp/layout.h",
    "exported/c++/src/capnp/list.c++",
    "exported/c++/src/capnp/list.h",
    "exported/c++/src/capnp/message.c++",
    "exported/c++/src/capnp/message.h",
    "exported/c++/src/capnp/orphan.h",
    "exported/c++/src/capnp/persistent.capnp.c++",
    "exported/c++/src/capnp/persistent.capnp.h",
    "exported/c++/src/capnp/pointer-helpers.h",
    "exported/c++/src/capnp/pretty-print.h",
    "exported/c++/src/capnp/rpc.c++",
    "exported/c++/src/capnp/rpc.capnp.c++",
    "exported/c++/src/capnp/rpc.capnp.h",
    "exported/c++/src/capnp/rpc.h",
    "exported/c++/src/capnp/rpc-prelude.h",
    "exported/c++/src/capnp/rpc-twoparty.c++",
    "exported/c++/src/capnp/rpc-twoparty.capnp.c++",
    "exported/c++/src/capnp/rpc-twoparty.capnp.h",
    "exported/c++/src/capnp/rpc-twoparty.h",
    "exported/c++/src/capnp/schema.c++",
    "exported/c++/src/capnp/schema.capnp.c++",
    "exported/c++/src/capnp/schema.capnp.h",
    "exported/c++/src/capnp/schema.h",
    "exported/c++/src/capnp/schema-lite.h",
    "exported/c++/src/capnp/schema-loader.c++",
    "exported/c++/src/capnp/schema-loader.h",
    "exported/c++/src/capnp/serialize-async.c++",
    "exported/c++/src/capnp/serialize-async.h",
    "exported/c++/src/capnp/serialize.c++",
    "exported/c++/src/capnp/serialize.h",
    "exported/c++/src/capnp/serialize-packed.c++",
    "exported/c++/src/capnp/serialize-packed.h",
    "exported/c++/src/capnp/stringify.c++",
  ]
  
  deps += [ ":kj" ]
}

executable("capnpc") {
  sources = [
    "exported/c++/src/capnp/compiler/capnp.c++",
    "exported/c++/src/capnp/compiler/capnpc-capnp.c++",
    "exported/c++/src/capnp/compiler/capnpc-c++.c++",
    "exported/c++/src/capnp/compiler/compiler.c++",
    "exported/c++/src/capnp/compiler/compiler.h",
    "exported/c++/src/capnp/compiler/error-reporter.c++",
    "exported/c++/src/capnp/compiler/error-reporter.h",
    "exported/c++/src/capnp/compiler/grammar.capnp.c++",
    "exported/c++/src/capnp/compiler/grammar.capnp.h",
    "exported/c++/src/capnp/compiler/lexer.capnp.c++",
    "exported/c++/src/capnp/compiler/lexer.capnp.h",
    "exported/c++/src/capnp/compiler/lexer.c++",
    "exported/c++/src/capnp/compiler/lexer.h",
    "exported/c++/src/capnp/compiler/md5.c++",
    "exported/c++/src/capnp/compiler/md5.h",
    "exported/c++/src/capnp/compiler/module-loader.c++",
    "exported/c++/src/capnp/compiler/module-loader.h",
    "exported/c++/src/capnp/compiler/node-translator.c++",
    "exported/c++/src/capnp/compiler/node-translator.h",
    "exported/c++/src/capnp/compiler/parser.c++",
    "exported/c++/src/capnp/compiler/parser.h",
    "exported/c++/src/capnp/schema-parser.c++",
    "exported/c++/src/capnp/schema-parser.h",
  ]

  deps += [ ":capnp" ]
}
