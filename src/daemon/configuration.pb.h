// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daemon/configuration.proto

#ifndef PROTOBUF_daemon_2fconfiguration_2eproto__INCLUDED
#define PROTOBUF_daemon_2fconfiguration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/base.pb.h"
// @@protoc_insertion_point(includes)

namespace dist_clang {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_daemon_2fconfiguration_2eproto();
void protobuf_AssignDesc_daemon_2fconfiguration_2eproto();
void protobuf_ShutdownFile_daemon_2fconfiguration_2eproto();

class Host;
class Verbosity;
class Verbosity_Range;
class Configuration;
class Configuration_Cache;
class Configuration_Emitter;
class Configuration_Absorber;
class Configuration_Collector;

// ===================================================================

class Host : public ::google::protobuf::Message {
 public:
  Host();
  virtual ~Host();

  Host(const Host& from);

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Host& default_instance();

  void Swap(Host* other);

  // implements Message ----------------------------------------------

  Host* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional uint32 port = 2 [default = 6000];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 threads = 3 [default = 2];
  inline bool has_threads() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 3;
  inline ::google::protobuf::uint32 threads() const;
  inline void set_threads(::google::protobuf::uint32 value);

  // optional bool disabled = 4 [default = false];
  inline bool has_disabled() const;
  inline void clear_disabled();
  static const int kDisabledFieldNumber = 4;
  inline bool disabled() const;
  inline void set_disabled(bool value);

  // optional bool ipv6 = 5 [default = false];
  inline bool has_ipv6() const;
  inline void clear_ipv6();
  static const int kIpv6FieldNumber = 5;
  inline bool ipv6() const;
  inline void set_ipv6(bool value);

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Host)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_threads();
  inline void clear_has_threads();
  inline void set_has_disabled();
  inline void clear_has_disabled();
  inline void set_has_ipv6();
  inline void clear_has_ipv6();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 threads_;
  bool disabled_;
  bool ipv6_;
  friend void  protobuf_AddDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_daemon_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Host* default_instance_;
};
// -------------------------------------------------------------------

class Verbosity_Range : public ::google::protobuf::Message {
 public:
  Verbosity_Range();
  virtual ~Verbosity_Range();

  Verbosity_Range(const Verbosity_Range& from);

  inline Verbosity_Range& operator=(const Verbosity_Range& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Verbosity_Range& default_instance();

  void Swap(Verbosity_Range* other);

  // implements Message ----------------------------------------------

  Verbosity_Range* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Verbosity_Range& from);
  void MergeFrom(const Verbosity_Range& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 right = 1;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 1;
  inline ::google::protobuf::uint32 right() const;
  inline void set_right(::google::protobuf::uint32 value);

  // optional uint32 left = 2;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 2;
  inline ::google::protobuf::uint32 left() const;
  inline void set_left(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Verbosity.Range)
 private:
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_left();
  inline void clear_has_left();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 right_;
  ::google::protobuf::uint32 left_;
  friend void  protobuf_AddDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_daemon_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Verbosity_Range* default_instance_;
};
// -------------------------------------------------------------------

class Verbosity : public ::google::protobuf::Message {
 public:
  Verbosity();
  virtual ~Verbosity();

  Verbosity(const Verbosity& from);

  inline Verbosity& operator=(const Verbosity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Verbosity& default_instance();

  void Swap(Verbosity* other);

  // implements Message ----------------------------------------------

  Verbosity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Verbosity& from);
  void MergeFrom(const Verbosity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Verbosity_Range Range;

  // accessors -------------------------------------------------------

  // optional uint32 error_mark = 1 [default = 20];
  inline bool has_error_mark() const;
  inline void clear_error_mark();
  static const int kErrorMarkFieldNumber = 1;
  inline ::google::protobuf::uint32 error_mark() const;
  inline void set_error_mark(::google::protobuf::uint32 value);

  // repeated .dist_clang.proto.Verbosity.Range levels = 2;
  inline int levels_size() const;
  inline void clear_levels();
  static const int kLevelsFieldNumber = 2;
  inline const ::dist_clang::proto::Verbosity_Range& levels(int index) const;
  inline ::dist_clang::proto::Verbosity_Range* mutable_levels(int index);
  inline ::dist_clang::proto::Verbosity_Range* add_levels();
  inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Verbosity_Range >&
      levels() const;
  inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Verbosity_Range >*
      mutable_levels();

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Verbosity)
 private:
  inline void set_has_error_mark();
  inline void clear_has_error_mark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Verbosity_Range > levels_;
  ::google::protobuf::uint32 error_mark_;
  friend void  protobuf_AddDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_daemon_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Verbosity* default_instance_;
};
// -------------------------------------------------------------------

class Configuration_Cache : public ::google::protobuf::Message {
 public:
  Configuration_Cache();
  virtual ~Configuration_Cache();

  Configuration_Cache(const Configuration_Cache& from);

  inline Configuration_Cache& operator=(const Configuration_Cache& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration_Cache& default_instance();

  void Swap(Configuration_Cache* other);

  // implements Message ----------------------------------------------

  Configuration_Cache* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration_Cache& from);
  void MergeFrom(const Configuration_Cache& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional uint64 size = 2 [default = 0];
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // optional bool direct = 4 [default = false];
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 4;
  inline bool direct() const;
  inline void set_direct(bool value);

  // optional bool mtime = 5 [default = false];
  inline bool has_mtime() const;
  inline void clear_mtime();
  static const int kMtimeFieldNumber = 5;
  inline bool mtime() const;
  inline void set_mtime(bool value);

  // optional bool disabled = 6 [default = false];
  inline bool has_disabled() const;
  inline void clear_disabled();
  static const int kDisabledFieldNumber = 6;
  inline bool disabled() const;
  inline void set_disabled(bool value);

  // optional bool snappy = 7 [default = true];
  inline bool has_snappy() const;
  inline void clear_snappy();
  static const int kSnappyFieldNumber = 7;
  inline bool snappy() const;
  inline void set_snappy(bool value);

  // optional uint32 threads = 8;
  inline bool has_threads() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 8;
  inline ::google::protobuf::uint32 threads() const;
  inline void set_threads(::google::protobuf::uint32 value);

  // optional uint32 clean_period = 9 [default = 600];
  inline bool has_clean_period() const;
  inline void clear_clean_period();
  static const int kCleanPeriodFieldNumber = 9;
  inline ::google::protobuf::uint32 clean_period() const;
  inline void set_clean_period(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Configuration.Cache)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_mtime();
  inline void clear_has_mtime();
  inline void set_has_disabled();
  inline void clear_has_disabled();
  inline void set_has_snappy();
  inline void clear_has_snappy();
  inline void set_has_threads();
  inline void clear_has_threads();
  inline void set_has_clean_period();
  inline void clear_has_clean_period();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::google::protobuf::uint64 size_;
  bool direct_;
  bool mtime_;
  bool disabled_;
  bool snappy_;
  ::google::protobuf::uint32 threads_;
  ::google::protobuf::uint32 clean_period_;
  friend void  protobuf_AddDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_daemon_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Configuration_Cache* default_instance_;
};
// -------------------------------------------------------------------

class Configuration_Emitter : public ::google::protobuf::Message {
 public:
  Configuration_Emitter();
  virtual ~Configuration_Emitter();

  Configuration_Emitter(const Configuration_Emitter& from);

  inline Configuration_Emitter& operator=(const Configuration_Emitter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration_Emitter& default_instance();

  void Swap(Configuration_Emitter* other);

  // implements Message ----------------------------------------------

  Configuration_Emitter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration_Emitter& from);
  void MergeFrom(const Configuration_Emitter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string socket_path = 1;
  inline bool has_socket_path() const;
  inline void clear_socket_path();
  static const int kSocketPathFieldNumber = 1;
  inline const ::std::string& socket_path() const;
  inline void set_socket_path(const ::std::string& value);
  inline void set_socket_path(const char* value);
  inline void set_socket_path(const char* value, size_t size);
  inline ::std::string* mutable_socket_path();
  inline ::std::string* release_socket_path();
  inline void set_allocated_socket_path(::std::string* socket_path);

  // repeated .dist_clang.proto.Host remotes = 2;
  inline int remotes_size() const;
  inline void clear_remotes();
  static const int kRemotesFieldNumber = 2;
  inline const ::dist_clang::proto::Host& remotes(int index) const;
  inline ::dist_clang::proto::Host* mutable_remotes(int index);
  inline ::dist_clang::proto::Host* add_remotes();
  inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host >&
      remotes() const;
  inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host >*
      mutable_remotes();

  // optional uint32 threads = 3 [default = 2];
  inline bool has_threads() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 3;
  inline ::google::protobuf::uint32 threads() const;
  inline void set_threads(::google::protobuf::uint32 value);

  // optional bool only_failed = 4 [default = false];
  inline bool has_only_failed() const;
  inline void clear_only_failed();
  static const int kOnlyFailedFieldNumber = 4;
  inline bool only_failed() const;
  inline void set_only_failed(bool value);

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Configuration.Emitter)
 private:
  inline void set_has_socket_path();
  inline void clear_has_socket_path();
  inline void set_has_threads();
  inline void clear_has_threads();
  inline void set_has_only_failed();
  inline void clear_has_only_failed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* socket_path_;
  ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host > remotes_;
  ::google::protobuf::uint32 threads_;
  bool only_failed_;
  friend void  protobuf_AddDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_daemon_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Configuration_Emitter* default_instance_;
};
// -------------------------------------------------------------------

class Configuration_Absorber : public ::google::protobuf::Message {
 public:
  Configuration_Absorber();
  virtual ~Configuration_Absorber();

  Configuration_Absorber(const Configuration_Absorber& from);

  inline Configuration_Absorber& operator=(const Configuration_Absorber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration_Absorber& default_instance();

  void Swap(Configuration_Absorber* other);

  // implements Message ----------------------------------------------

  Configuration_Absorber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration_Absorber& from);
  void MergeFrom(const Configuration_Absorber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .dist_clang.proto.Host local = 1;
  inline bool has_local() const;
  inline void clear_local();
  static const int kLocalFieldNumber = 1;
  inline const ::dist_clang::proto::Host& local() const;
  inline ::dist_clang::proto::Host* mutable_local();
  inline ::dist_clang::proto::Host* release_local();
  inline void set_allocated_local(::dist_clang::proto::Host* local);

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Configuration.Absorber)
 private:
  inline void set_has_local();
  inline void clear_has_local();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::dist_clang::proto::Host* local_;
  friend void  protobuf_AddDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_daemon_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Configuration_Absorber* default_instance_;
};
// -------------------------------------------------------------------

class Configuration_Collector : public ::google::protobuf::Message {
 public:
  Configuration_Collector();
  virtual ~Configuration_Collector();

  Configuration_Collector(const Configuration_Collector& from);

  inline Configuration_Collector& operator=(const Configuration_Collector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration_Collector& default_instance();

  void Swap(Configuration_Collector* other);

  // implements Message ----------------------------------------------

  Configuration_Collector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration_Collector& from);
  void MergeFrom(const Configuration_Collector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .dist_clang.proto.Host local = 1;
  inline bool has_local() const;
  inline void clear_local();
  static const int kLocalFieldNumber = 1;
  inline const ::dist_clang::proto::Host& local() const;
  inline ::dist_clang::proto::Host* mutable_local();
  inline ::dist_clang::proto::Host* release_local();
  inline void set_allocated_local(::dist_clang::proto::Host* local);

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Configuration.Collector)
 private:
  inline void set_has_local();
  inline void clear_has_local();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::dist_clang::proto::Host* local_;
  friend void  protobuf_AddDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_daemon_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Configuration_Collector* default_instance_;
};
// -------------------------------------------------------------------

class Configuration : public ::google::protobuf::Message {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration& default_instance();

  void Swap(Configuration* other);

  // implements Message ----------------------------------------------

  Configuration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Configuration_Cache Cache;
  typedef Configuration_Emitter Emitter;
  typedef Configuration_Absorber Absorber;
  typedef Configuration_Collector Collector;

  // accessors -------------------------------------------------------

  // optional .dist_clang.proto.Configuration.Emitter emitter = 1;
  inline bool has_emitter() const;
  inline void clear_emitter();
  static const int kEmitterFieldNumber = 1;
  inline const ::dist_clang::proto::Configuration_Emitter& emitter() const;
  inline ::dist_clang::proto::Configuration_Emitter* mutable_emitter();
  inline ::dist_clang::proto::Configuration_Emitter* release_emitter();
  inline void set_allocated_emitter(::dist_clang::proto::Configuration_Emitter* emitter);

  // optional .dist_clang.proto.Configuration.Absorber absorber = 2;
  inline bool has_absorber() const;
  inline void clear_absorber();
  static const int kAbsorberFieldNumber = 2;
  inline const ::dist_clang::proto::Configuration_Absorber& absorber() const;
  inline ::dist_clang::proto::Configuration_Absorber* mutable_absorber();
  inline ::dist_clang::proto::Configuration_Absorber* release_absorber();
  inline void set_allocated_absorber(::dist_clang::proto::Configuration_Absorber* absorber);

  // optional .dist_clang.proto.Configuration.Collector collector = 3;
  inline bool has_collector() const;
  inline void clear_collector();
  static const int kCollectorFieldNumber = 3;
  inline const ::dist_clang::proto::Configuration_Collector& collector() const;
  inline ::dist_clang::proto::Configuration_Collector* mutable_collector();
  inline ::dist_clang::proto::Configuration_Collector* release_collector();
  inline void set_allocated_collector(::dist_clang::proto::Configuration_Collector* collector);

  // optional uint32 pool_capacity = 4 [default = 16];
  inline bool has_pool_capacity() const;
  inline void clear_pool_capacity();
  static const int kPoolCapacityFieldNumber = 4;
  inline ::google::protobuf::uint32 pool_capacity() const;
  inline void set_pool_capacity(::google::protobuf::uint32 value);

  // repeated .dist_clang.proto.Compiler versions = 5;
  inline int versions_size() const;
  inline void clear_versions();
  static const int kVersionsFieldNumber = 5;
  inline const ::dist_clang::proto::Compiler& versions(int index) const;
  inline ::dist_clang::proto::Compiler* mutable_versions(int index);
  inline ::dist_clang::proto::Compiler* add_versions();
  inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler >&
      versions() const;
  inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler >*
      mutable_versions();

  // optional .dist_clang.proto.Verbosity verbosity = 6;
  inline bool has_verbosity() const;
  inline void clear_verbosity();
  static const int kVerbosityFieldNumber = 6;
  inline const ::dist_clang::proto::Verbosity& verbosity() const;
  inline ::dist_clang::proto::Verbosity* mutable_verbosity();
  inline ::dist_clang::proto::Verbosity* release_verbosity();
  inline void set_allocated_verbosity(::dist_clang::proto::Verbosity* verbosity);

  // optional uint32 user_id = 7;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional string config_path = 8;
  inline bool has_config_path() const;
  inline void clear_config_path();
  static const int kConfigPathFieldNumber = 8;
  inline const ::std::string& config_path() const;
  inline void set_config_path(const ::std::string& value);
  inline void set_config_path(const char* value);
  inline void set_config_path(const char* value, size_t size);
  inline ::std::string* mutable_config_path();
  inline ::std::string* release_config_path();
  inline void set_allocated_config_path(::std::string* config_path);

  // optional .dist_clang.proto.Configuration.Cache cache = 9;
  inline bool has_cache() const;
  inline void clear_cache();
  static const int kCacheFieldNumber = 9;
  inline const ::dist_clang::proto::Configuration_Cache& cache() const;
  inline ::dist_clang::proto::Configuration_Cache* mutable_cache();
  inline ::dist_clang::proto::Configuration_Cache* release_cache();
  inline void set_allocated_cache(::dist_clang::proto::Configuration_Cache* cache);

  // optional uint32 read_timeout = 10 [default = 60];
  inline bool has_read_timeout() const;
  inline void clear_read_timeout();
  static const int kReadTimeoutFieldNumber = 10;
  inline ::google::protobuf::uint32 read_timeout() const;
  inline void set_read_timeout(::google::protobuf::uint32 value);

  // optional uint32 send_timeout = 11 [default = 5];
  inline bool has_send_timeout() const;
  inline void clear_send_timeout();
  static const int kSendTimeoutFieldNumber = 11;
  inline ::google::protobuf::uint32 send_timeout() const;
  inline void set_send_timeout(::google::protobuf::uint32 value);

  // optional uint32 read_minimum = 12 [default = 32];
  inline bool has_read_minimum() const;
  inline void clear_read_minimum();
  static const int kReadMinimumFieldNumber = 12;
  inline ::google::protobuf::uint32 read_minimum() const;
  inline void set_read_minimum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dist_clang.proto.Configuration)
 private:
  inline void set_has_emitter();
  inline void clear_has_emitter();
  inline void set_has_absorber();
  inline void clear_has_absorber();
  inline void set_has_collector();
  inline void clear_has_collector();
  inline void set_has_pool_capacity();
  inline void clear_has_pool_capacity();
  inline void set_has_verbosity();
  inline void clear_has_verbosity();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_config_path();
  inline void clear_has_config_path();
  inline void set_has_cache();
  inline void clear_has_cache();
  inline void set_has_read_timeout();
  inline void clear_has_read_timeout();
  inline void set_has_send_timeout();
  inline void clear_has_send_timeout();
  inline void set_has_read_minimum();
  inline void clear_has_read_minimum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::dist_clang::proto::Configuration_Emitter* emitter_;
  ::dist_clang::proto::Configuration_Absorber* absorber_;
  ::dist_clang::proto::Configuration_Collector* collector_;
  ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler > versions_;
  ::google::protobuf::uint32 pool_capacity_;
  ::google::protobuf::uint32 user_id_;
  ::dist_clang::proto::Verbosity* verbosity_;
  ::std::string* config_path_;
  ::dist_clang::proto::Configuration_Cache* cache_;
  ::google::protobuf::uint32 read_timeout_;
  ::google::protobuf::uint32 send_timeout_;
  ::google::protobuf::uint32 read_minimum_;
  friend void  protobuf_AddDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_AssignDesc_daemon_2fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_daemon_2fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static Configuration* default_instance_;
};
// ===================================================================


// ===================================================================

// Host

// required string host = 1;
inline bool Host::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Host::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Host::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Host::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& Host::host() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Host.host)
  return *host_;
}
inline void Host::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:dist_clang.proto.Host.host)
}
inline void Host::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:dist_clang.proto.Host.host)
}
inline void Host::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dist_clang.proto.Host.host)
}
inline ::std::string* Host::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Host.host)
  return host_;
}
inline ::std::string* Host::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Host::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Host.host)
}

// optional uint32 port = 2 [default = 6000];
inline bool Host::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Host::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Host::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Host::clear_port() {
  port_ = 6000u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Host::port() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Host.port)
  return port_;
}
inline void Host::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Host.port)
}

// optional uint32 threads = 3 [default = 2];
inline bool Host::has_threads() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Host::set_has_threads() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Host::clear_has_threads() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Host::clear_threads() {
  threads_ = 2u;
  clear_has_threads();
}
inline ::google::protobuf::uint32 Host::threads() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Host.threads)
  return threads_;
}
inline void Host::set_threads(::google::protobuf::uint32 value) {
  set_has_threads();
  threads_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Host.threads)
}

// optional bool disabled = 4 [default = false];
inline bool Host::has_disabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Host::set_has_disabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Host::clear_has_disabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Host::clear_disabled() {
  disabled_ = false;
  clear_has_disabled();
}
inline bool Host::disabled() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Host.disabled)
  return disabled_;
}
inline void Host::set_disabled(bool value) {
  set_has_disabled();
  disabled_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Host.disabled)
}

// optional bool ipv6 = 5 [default = false];
inline bool Host::has_ipv6() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Host::set_has_ipv6() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Host::clear_has_ipv6() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Host::clear_ipv6() {
  ipv6_ = false;
  clear_has_ipv6();
}
inline bool Host::ipv6() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Host.ipv6)
  return ipv6_;
}
inline void Host::set_ipv6(bool value) {
  set_has_ipv6();
  ipv6_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Host.ipv6)
}

// -------------------------------------------------------------------

// Verbosity_Range

// required uint32 right = 1;
inline bool Verbosity_Range::has_right() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Verbosity_Range::set_has_right() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Verbosity_Range::clear_has_right() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Verbosity_Range::clear_right() {
  right_ = 0u;
  clear_has_right();
}
inline ::google::protobuf::uint32 Verbosity_Range::right() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Verbosity.Range.right)
  return right_;
}
inline void Verbosity_Range::set_right(::google::protobuf::uint32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Verbosity.Range.right)
}

// optional uint32 left = 2;
inline bool Verbosity_Range::has_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Verbosity_Range::set_has_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Verbosity_Range::clear_has_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Verbosity_Range::clear_left() {
  left_ = 0u;
  clear_has_left();
}
inline ::google::protobuf::uint32 Verbosity_Range::left() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Verbosity.Range.left)
  return left_;
}
inline void Verbosity_Range::set_left(::google::protobuf::uint32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Verbosity.Range.left)
}

// -------------------------------------------------------------------

// Verbosity

// optional uint32 error_mark = 1 [default = 20];
inline bool Verbosity::has_error_mark() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Verbosity::set_has_error_mark() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Verbosity::clear_has_error_mark() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Verbosity::clear_error_mark() {
  error_mark_ = 20u;
  clear_has_error_mark();
}
inline ::google::protobuf::uint32 Verbosity::error_mark() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Verbosity.error_mark)
  return error_mark_;
}
inline void Verbosity::set_error_mark(::google::protobuf::uint32 value) {
  set_has_error_mark();
  error_mark_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Verbosity.error_mark)
}

// repeated .dist_clang.proto.Verbosity.Range levels = 2;
inline int Verbosity::levels_size() const {
  return levels_.size();
}
inline void Verbosity::clear_levels() {
  levels_.Clear();
}
inline const ::dist_clang::proto::Verbosity_Range& Verbosity::levels(int index) const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Verbosity.levels)
  return levels_.Get(index);
}
inline ::dist_clang::proto::Verbosity_Range* Verbosity::mutable_levels(int index) {
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Verbosity.levels)
  return levels_.Mutable(index);
}
inline ::dist_clang::proto::Verbosity_Range* Verbosity::add_levels() {
  // @@protoc_insertion_point(field_add:dist_clang.proto.Verbosity.levels)
  return levels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Verbosity_Range >&
Verbosity::levels() const {
  // @@protoc_insertion_point(field_list:dist_clang.proto.Verbosity.levels)
  return levels_;
}
inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Verbosity_Range >*
Verbosity::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:dist_clang.proto.Verbosity.levels)
  return &levels_;
}

// -------------------------------------------------------------------

// Configuration_Cache

// required string path = 1;
inline bool Configuration_Cache::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration_Cache::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration_Cache::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration_Cache::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Configuration_Cache::path() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Cache.path)
  return *path_;
}
inline void Configuration_Cache::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Cache.path)
}
inline void Configuration_Cache::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:dist_clang.proto.Configuration.Cache.path)
}
inline void Configuration_Cache::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dist_clang.proto.Configuration.Cache.path)
}
inline ::std::string* Configuration_Cache::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.Cache.path)
  return path_;
}
inline ::std::string* Configuration_Cache::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Configuration_Cache::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.Cache.path)
}

// optional uint64 size = 2 [default = 0];
inline bool Configuration_Cache::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Configuration_Cache::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Configuration_Cache::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Configuration_Cache::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 Configuration_Cache::size() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Cache.size)
  return size_;
}
inline void Configuration_Cache::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Cache.size)
}

// optional bool direct = 4 [default = false];
inline bool Configuration_Cache::has_direct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Configuration_Cache::set_has_direct() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Configuration_Cache::clear_has_direct() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Configuration_Cache::clear_direct() {
  direct_ = false;
  clear_has_direct();
}
inline bool Configuration_Cache::direct() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Cache.direct)
  return direct_;
}
inline void Configuration_Cache::set_direct(bool value) {
  set_has_direct();
  direct_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Cache.direct)
}

// optional bool mtime = 5 [default = false];
inline bool Configuration_Cache::has_mtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Configuration_Cache::set_has_mtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Configuration_Cache::clear_has_mtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Configuration_Cache::clear_mtime() {
  mtime_ = false;
  clear_has_mtime();
}
inline bool Configuration_Cache::mtime() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Cache.mtime)
  return mtime_;
}
inline void Configuration_Cache::set_mtime(bool value) {
  set_has_mtime();
  mtime_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Cache.mtime)
}

// optional bool disabled = 6 [default = false];
inline bool Configuration_Cache::has_disabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Configuration_Cache::set_has_disabled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Configuration_Cache::clear_has_disabled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Configuration_Cache::clear_disabled() {
  disabled_ = false;
  clear_has_disabled();
}
inline bool Configuration_Cache::disabled() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Cache.disabled)
  return disabled_;
}
inline void Configuration_Cache::set_disabled(bool value) {
  set_has_disabled();
  disabled_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Cache.disabled)
}

// optional bool snappy = 7 [default = true];
inline bool Configuration_Cache::has_snappy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Configuration_Cache::set_has_snappy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Configuration_Cache::clear_has_snappy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Configuration_Cache::clear_snappy() {
  snappy_ = true;
  clear_has_snappy();
}
inline bool Configuration_Cache::snappy() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Cache.snappy)
  return snappy_;
}
inline void Configuration_Cache::set_snappy(bool value) {
  set_has_snappy();
  snappy_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Cache.snappy)
}

// optional uint32 threads = 8;
inline bool Configuration_Cache::has_threads() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Configuration_Cache::set_has_threads() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Configuration_Cache::clear_has_threads() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Configuration_Cache::clear_threads() {
  threads_ = 0u;
  clear_has_threads();
}
inline ::google::protobuf::uint32 Configuration_Cache::threads() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Cache.threads)
  return threads_;
}
inline void Configuration_Cache::set_threads(::google::protobuf::uint32 value) {
  set_has_threads();
  threads_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Cache.threads)
}

// optional uint32 clean_period = 9 [default = 600];
inline bool Configuration_Cache::has_clean_period() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Configuration_Cache::set_has_clean_period() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Configuration_Cache::clear_has_clean_period() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Configuration_Cache::clear_clean_period() {
  clean_period_ = 600u;
  clear_has_clean_period();
}
inline ::google::protobuf::uint32 Configuration_Cache::clean_period() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Cache.clean_period)
  return clean_period_;
}
inline void Configuration_Cache::set_clean_period(::google::protobuf::uint32 value) {
  set_has_clean_period();
  clean_period_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Cache.clean_period)
}

// -------------------------------------------------------------------

// Configuration_Emitter

// required string socket_path = 1;
inline bool Configuration_Emitter::has_socket_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration_Emitter::set_has_socket_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration_Emitter::clear_has_socket_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration_Emitter::clear_socket_path() {
  if (socket_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_path_->clear();
  }
  clear_has_socket_path();
}
inline const ::std::string& Configuration_Emitter::socket_path() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Emitter.socket_path)
  return *socket_path_;
}
inline void Configuration_Emitter::set_socket_path(const ::std::string& value) {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_path_ = new ::std::string;
  }
  socket_path_->assign(value);
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Emitter.socket_path)
}
inline void Configuration_Emitter::set_socket_path(const char* value) {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_path_ = new ::std::string;
  }
  socket_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:dist_clang.proto.Configuration.Emitter.socket_path)
}
inline void Configuration_Emitter::set_socket_path(const char* value, size_t size) {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_path_ = new ::std::string;
  }
  socket_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dist_clang.proto.Configuration.Emitter.socket_path)
}
inline ::std::string* Configuration_Emitter::mutable_socket_path() {
  set_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socket_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.Emitter.socket_path)
  return socket_path_;
}
inline ::std::string* Configuration_Emitter::release_socket_path() {
  clear_has_socket_path();
  if (socket_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = socket_path_;
    socket_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Configuration_Emitter::set_allocated_socket_path(::std::string* socket_path) {
  if (socket_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socket_path_;
  }
  if (socket_path) {
    set_has_socket_path();
    socket_path_ = socket_path;
  } else {
    clear_has_socket_path();
    socket_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.Emitter.socket_path)
}

// repeated .dist_clang.proto.Host remotes = 2;
inline int Configuration_Emitter::remotes_size() const {
  return remotes_.size();
}
inline void Configuration_Emitter::clear_remotes() {
  remotes_.Clear();
}
inline const ::dist_clang::proto::Host& Configuration_Emitter::remotes(int index) const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Emitter.remotes)
  return remotes_.Get(index);
}
inline ::dist_clang::proto::Host* Configuration_Emitter::mutable_remotes(int index) {
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.Emitter.remotes)
  return remotes_.Mutable(index);
}
inline ::dist_clang::proto::Host* Configuration_Emitter::add_remotes() {
  // @@protoc_insertion_point(field_add:dist_clang.proto.Configuration.Emitter.remotes)
  return remotes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host >&
Configuration_Emitter::remotes() const {
  // @@protoc_insertion_point(field_list:dist_clang.proto.Configuration.Emitter.remotes)
  return remotes_;
}
inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Host >*
Configuration_Emitter::mutable_remotes() {
  // @@protoc_insertion_point(field_mutable_list:dist_clang.proto.Configuration.Emitter.remotes)
  return &remotes_;
}

// optional uint32 threads = 3 [default = 2];
inline bool Configuration_Emitter::has_threads() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Configuration_Emitter::set_has_threads() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Configuration_Emitter::clear_has_threads() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Configuration_Emitter::clear_threads() {
  threads_ = 2u;
  clear_has_threads();
}
inline ::google::protobuf::uint32 Configuration_Emitter::threads() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Emitter.threads)
  return threads_;
}
inline void Configuration_Emitter::set_threads(::google::protobuf::uint32 value) {
  set_has_threads();
  threads_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Emitter.threads)
}

// optional bool only_failed = 4 [default = false];
inline bool Configuration_Emitter::has_only_failed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Configuration_Emitter::set_has_only_failed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Configuration_Emitter::clear_has_only_failed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Configuration_Emitter::clear_only_failed() {
  only_failed_ = false;
  clear_has_only_failed();
}
inline bool Configuration_Emitter::only_failed() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Emitter.only_failed)
  return only_failed_;
}
inline void Configuration_Emitter::set_only_failed(bool value) {
  set_has_only_failed();
  only_failed_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.Emitter.only_failed)
}

// -------------------------------------------------------------------

// Configuration_Absorber

// required .dist_clang.proto.Host local = 1;
inline bool Configuration_Absorber::has_local() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration_Absorber::set_has_local() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration_Absorber::clear_has_local() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration_Absorber::clear_local() {
  if (local_ != NULL) local_->::dist_clang::proto::Host::Clear();
  clear_has_local();
}
inline const ::dist_clang::proto::Host& Configuration_Absorber::local() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Absorber.local)
  return local_ != NULL ? *local_ : *default_instance_->local_;
}
inline ::dist_clang::proto::Host* Configuration_Absorber::mutable_local() {
  set_has_local();
  if (local_ == NULL) local_ = new ::dist_clang::proto::Host;
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.Absorber.local)
  return local_;
}
inline ::dist_clang::proto::Host* Configuration_Absorber::release_local() {
  clear_has_local();
  ::dist_clang::proto::Host* temp = local_;
  local_ = NULL;
  return temp;
}
inline void Configuration_Absorber::set_allocated_local(::dist_clang::proto::Host* local) {
  delete local_;
  local_ = local;
  if (local) {
    set_has_local();
  } else {
    clear_has_local();
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.Absorber.local)
}

// -------------------------------------------------------------------

// Configuration_Collector

// required .dist_clang.proto.Host local = 1;
inline bool Configuration_Collector::has_local() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration_Collector::set_has_local() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration_Collector::clear_has_local() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration_Collector::clear_local() {
  if (local_ != NULL) local_->::dist_clang::proto::Host::Clear();
  clear_has_local();
}
inline const ::dist_clang::proto::Host& Configuration_Collector::local() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.Collector.local)
  return local_ != NULL ? *local_ : *default_instance_->local_;
}
inline ::dist_clang::proto::Host* Configuration_Collector::mutable_local() {
  set_has_local();
  if (local_ == NULL) local_ = new ::dist_clang::proto::Host;
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.Collector.local)
  return local_;
}
inline ::dist_clang::proto::Host* Configuration_Collector::release_local() {
  clear_has_local();
  ::dist_clang::proto::Host* temp = local_;
  local_ = NULL;
  return temp;
}
inline void Configuration_Collector::set_allocated_local(::dist_clang::proto::Host* local) {
  delete local_;
  local_ = local;
  if (local) {
    set_has_local();
  } else {
    clear_has_local();
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.Collector.local)
}

// -------------------------------------------------------------------

// Configuration

// optional .dist_clang.proto.Configuration.Emitter emitter = 1;
inline bool Configuration::has_emitter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Configuration::set_has_emitter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Configuration::clear_has_emitter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Configuration::clear_emitter() {
  if (emitter_ != NULL) emitter_->::dist_clang::proto::Configuration_Emitter::Clear();
  clear_has_emitter();
}
inline const ::dist_clang::proto::Configuration_Emitter& Configuration::emitter() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.emitter)
  return emitter_ != NULL ? *emitter_ : *default_instance_->emitter_;
}
inline ::dist_clang::proto::Configuration_Emitter* Configuration::mutable_emitter() {
  set_has_emitter();
  if (emitter_ == NULL) emitter_ = new ::dist_clang::proto::Configuration_Emitter;
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.emitter)
  return emitter_;
}
inline ::dist_clang::proto::Configuration_Emitter* Configuration::release_emitter() {
  clear_has_emitter();
  ::dist_clang::proto::Configuration_Emitter* temp = emitter_;
  emitter_ = NULL;
  return temp;
}
inline void Configuration::set_allocated_emitter(::dist_clang::proto::Configuration_Emitter* emitter) {
  delete emitter_;
  emitter_ = emitter;
  if (emitter) {
    set_has_emitter();
  } else {
    clear_has_emitter();
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.emitter)
}

// optional .dist_clang.proto.Configuration.Absorber absorber = 2;
inline bool Configuration::has_absorber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Configuration::set_has_absorber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Configuration::clear_has_absorber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Configuration::clear_absorber() {
  if (absorber_ != NULL) absorber_->::dist_clang::proto::Configuration_Absorber::Clear();
  clear_has_absorber();
}
inline const ::dist_clang::proto::Configuration_Absorber& Configuration::absorber() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.absorber)
  return absorber_ != NULL ? *absorber_ : *default_instance_->absorber_;
}
inline ::dist_clang::proto::Configuration_Absorber* Configuration::mutable_absorber() {
  set_has_absorber();
  if (absorber_ == NULL) absorber_ = new ::dist_clang::proto::Configuration_Absorber;
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.absorber)
  return absorber_;
}
inline ::dist_clang::proto::Configuration_Absorber* Configuration::release_absorber() {
  clear_has_absorber();
  ::dist_clang::proto::Configuration_Absorber* temp = absorber_;
  absorber_ = NULL;
  return temp;
}
inline void Configuration::set_allocated_absorber(::dist_clang::proto::Configuration_Absorber* absorber) {
  delete absorber_;
  absorber_ = absorber;
  if (absorber) {
    set_has_absorber();
  } else {
    clear_has_absorber();
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.absorber)
}

// optional .dist_clang.proto.Configuration.Collector collector = 3;
inline bool Configuration::has_collector() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Configuration::set_has_collector() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Configuration::clear_has_collector() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Configuration::clear_collector() {
  if (collector_ != NULL) collector_->::dist_clang::proto::Configuration_Collector::Clear();
  clear_has_collector();
}
inline const ::dist_clang::proto::Configuration_Collector& Configuration::collector() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.collector)
  return collector_ != NULL ? *collector_ : *default_instance_->collector_;
}
inline ::dist_clang::proto::Configuration_Collector* Configuration::mutable_collector() {
  set_has_collector();
  if (collector_ == NULL) collector_ = new ::dist_clang::proto::Configuration_Collector;
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.collector)
  return collector_;
}
inline ::dist_clang::proto::Configuration_Collector* Configuration::release_collector() {
  clear_has_collector();
  ::dist_clang::proto::Configuration_Collector* temp = collector_;
  collector_ = NULL;
  return temp;
}
inline void Configuration::set_allocated_collector(::dist_clang::proto::Configuration_Collector* collector) {
  delete collector_;
  collector_ = collector;
  if (collector) {
    set_has_collector();
  } else {
    clear_has_collector();
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.collector)
}

// optional uint32 pool_capacity = 4 [default = 16];
inline bool Configuration::has_pool_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Configuration::set_has_pool_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Configuration::clear_has_pool_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Configuration::clear_pool_capacity() {
  pool_capacity_ = 16u;
  clear_has_pool_capacity();
}
inline ::google::protobuf::uint32 Configuration::pool_capacity() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.pool_capacity)
  return pool_capacity_;
}
inline void Configuration::set_pool_capacity(::google::protobuf::uint32 value) {
  set_has_pool_capacity();
  pool_capacity_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.pool_capacity)
}

// repeated .dist_clang.proto.Compiler versions = 5;
inline int Configuration::versions_size() const {
  return versions_.size();
}
inline void Configuration::clear_versions() {
  versions_.Clear();
}
inline const ::dist_clang::proto::Compiler& Configuration::versions(int index) const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.versions)
  return versions_.Get(index);
}
inline ::dist_clang::proto::Compiler* Configuration::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.versions)
  return versions_.Mutable(index);
}
inline ::dist_clang::proto::Compiler* Configuration::add_versions() {
  // @@protoc_insertion_point(field_add:dist_clang.proto.Configuration.versions)
  return versions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler >&
Configuration::versions() const {
  // @@protoc_insertion_point(field_list:dist_clang.proto.Configuration.versions)
  return versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::dist_clang::proto::Compiler >*
Configuration::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:dist_clang.proto.Configuration.versions)
  return &versions_;
}

// optional .dist_clang.proto.Verbosity verbosity = 6;
inline bool Configuration::has_verbosity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Configuration::set_has_verbosity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Configuration::clear_has_verbosity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Configuration::clear_verbosity() {
  if (verbosity_ != NULL) verbosity_->::dist_clang::proto::Verbosity::Clear();
  clear_has_verbosity();
}
inline const ::dist_clang::proto::Verbosity& Configuration::verbosity() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.verbosity)
  return verbosity_ != NULL ? *verbosity_ : *default_instance_->verbosity_;
}
inline ::dist_clang::proto::Verbosity* Configuration::mutable_verbosity() {
  set_has_verbosity();
  if (verbosity_ == NULL) verbosity_ = new ::dist_clang::proto::Verbosity;
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.verbosity)
  return verbosity_;
}
inline ::dist_clang::proto::Verbosity* Configuration::release_verbosity() {
  clear_has_verbosity();
  ::dist_clang::proto::Verbosity* temp = verbosity_;
  verbosity_ = NULL;
  return temp;
}
inline void Configuration::set_allocated_verbosity(::dist_clang::proto::Verbosity* verbosity) {
  delete verbosity_;
  verbosity_ = verbosity;
  if (verbosity) {
    set_has_verbosity();
  } else {
    clear_has_verbosity();
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.verbosity)
}

// optional uint32 user_id = 7;
inline bool Configuration::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Configuration::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Configuration::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Configuration::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 Configuration::user_id() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.user_id)
  return user_id_;
}
inline void Configuration::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.user_id)
}

// optional string config_path = 8;
inline bool Configuration::has_config_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Configuration::set_has_config_path() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Configuration::clear_has_config_path() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Configuration::clear_config_path() {
  if (config_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_path_->clear();
  }
  clear_has_config_path();
}
inline const ::std::string& Configuration::config_path() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.config_path)
  return *config_path_;
}
inline void Configuration::set_config_path(const ::std::string& value) {
  set_has_config_path();
  if (config_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_path_ = new ::std::string;
  }
  config_path_->assign(value);
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.config_path)
}
inline void Configuration::set_config_path(const char* value) {
  set_has_config_path();
  if (config_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_path_ = new ::std::string;
  }
  config_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:dist_clang.proto.Configuration.config_path)
}
inline void Configuration::set_config_path(const char* value, size_t size) {
  set_has_config_path();
  if (config_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_path_ = new ::std::string;
  }
  config_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dist_clang.proto.Configuration.config_path)
}
inline ::std::string* Configuration::mutable_config_path() {
  set_has_config_path();
  if (config_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.config_path)
  return config_path_;
}
inline ::std::string* Configuration::release_config_path() {
  clear_has_config_path();
  if (config_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = config_path_;
    config_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Configuration::set_allocated_config_path(::std::string* config_path) {
  if (config_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_path_;
  }
  if (config_path) {
    set_has_config_path();
    config_path_ = config_path;
  } else {
    clear_has_config_path();
    config_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.config_path)
}

// optional .dist_clang.proto.Configuration.Cache cache = 9;
inline bool Configuration::has_cache() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Configuration::set_has_cache() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Configuration::clear_has_cache() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Configuration::clear_cache() {
  if (cache_ != NULL) cache_->::dist_clang::proto::Configuration_Cache::Clear();
  clear_has_cache();
}
inline const ::dist_clang::proto::Configuration_Cache& Configuration::cache() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.cache)
  return cache_ != NULL ? *cache_ : *default_instance_->cache_;
}
inline ::dist_clang::proto::Configuration_Cache* Configuration::mutable_cache() {
  set_has_cache();
  if (cache_ == NULL) cache_ = new ::dist_clang::proto::Configuration_Cache;
  // @@protoc_insertion_point(field_mutable:dist_clang.proto.Configuration.cache)
  return cache_;
}
inline ::dist_clang::proto::Configuration_Cache* Configuration::release_cache() {
  clear_has_cache();
  ::dist_clang::proto::Configuration_Cache* temp = cache_;
  cache_ = NULL;
  return temp;
}
inline void Configuration::set_allocated_cache(::dist_clang::proto::Configuration_Cache* cache) {
  delete cache_;
  cache_ = cache;
  if (cache) {
    set_has_cache();
  } else {
    clear_has_cache();
  }
  // @@protoc_insertion_point(field_set_allocated:dist_clang.proto.Configuration.cache)
}

// optional uint32 read_timeout = 10 [default = 60];
inline bool Configuration::has_read_timeout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Configuration::set_has_read_timeout() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Configuration::clear_has_read_timeout() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Configuration::clear_read_timeout() {
  read_timeout_ = 60u;
  clear_has_read_timeout();
}
inline ::google::protobuf::uint32 Configuration::read_timeout() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.read_timeout)
  return read_timeout_;
}
inline void Configuration::set_read_timeout(::google::protobuf::uint32 value) {
  set_has_read_timeout();
  read_timeout_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.read_timeout)
}

// optional uint32 send_timeout = 11 [default = 5];
inline bool Configuration::has_send_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Configuration::set_has_send_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Configuration::clear_has_send_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Configuration::clear_send_timeout() {
  send_timeout_ = 5u;
  clear_has_send_timeout();
}
inline ::google::protobuf::uint32 Configuration::send_timeout() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.send_timeout)
  return send_timeout_;
}
inline void Configuration::set_send_timeout(::google::protobuf::uint32 value) {
  set_has_send_timeout();
  send_timeout_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.send_timeout)
}

// optional uint32 read_minimum = 12 [default = 32];
inline bool Configuration::has_read_minimum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Configuration::set_has_read_minimum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Configuration::clear_has_read_minimum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Configuration::clear_read_minimum() {
  read_minimum_ = 32u;
  clear_has_read_minimum();
}
inline ::google::protobuf::uint32 Configuration::read_minimum() const {
  // @@protoc_insertion_point(field_get:dist_clang.proto.Configuration.read_minimum)
  return read_minimum_;
}
inline void Configuration::set_read_minimum(::google::protobuf::uint32 value) {
  set_has_read_minimum();
  read_minimum_ = value;
  // @@protoc_insertion_point(field_set:dist_clang.proto.Configuration.read_minimum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dist_clang

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_daemon_2fconfiguration_2eproto__INCLUDED
